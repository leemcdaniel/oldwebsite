geem
detach("geeM")
detach("package:geeM")
library(geeM)
rm(geem)
library(geeM)
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "ar1")
fit
# Add some NAs in one covariate
# Should run fine, number of observations should be 180
nas <- sample(1:200, 20)
dat$x1[nas] <- NA
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "ar1")
fit
nas <- sample(1:200, 20)
dat$x2[nas] <- NA
fit <- geem(y ~ x1 + x2 , id = id, data = dat, corstr = "ar1")
fit
xf <- as.factor(sample(1:3, size=200, replace=T))
dat$xf <- xf
nas <- sample(1:200, 20)
dat$xf[nas] <- NA
fit <- geem(y ~ x1 + x2+xf, id = id, data = dat, corstr = "ar1")
fit
# Put ID in environment, don't pass in data frame
# Shouldn't be a problem
id <- dat$id
df <- dat[,c(1,3,4,5,6)]
fit <- geem(y ~ x1 + x2+xf, id = id, data = df, corstr = "ar1")
fit
rm(id)
# Get
y <- dat$y
x1 <- dat$x1
x2 <- dat$x2
xf <- dat$xf
id <- dat$id
fit <- geem(y ~ x1 + x2+xf, id = id,  corstr = "ar1")
fit
rm(list=c("y", "x1", "x2", "xf", "id"))
summary(fit)
wgt <- c(rep(0, 20), rep(1, 180))
dat$wgt <- wgt
fit <- geem(y ~ x1 + x2+xf, id = id, data=dat, corstr = "ar1", weights=wgt)
fit
rm(list=ls())
detach("package:geeM")
library(geeM)
gendat <- function() {
id <- gl(50, 4, 200)
visit <- rep(1:4, 50)
x1 <- rbinom(200, 1, 0.6) ## within cluster varying binary covariate
x2 <- runif(200, 0, 1)   ## within cluster varying continuous covariate
phi <- 1 + 2 * x1         ## true scale model
## the true correlation coefficient rho for an ar(1)
## correlation structure is 0.667.
rhomat <- 0.667 ^ outer(1:4, 1:4, function(x, y) abs(x - y))
chol.u <- chol(rhomat)
noise <- as.vector(sapply(1:50, function(x) chol.u %*% rnorm(4)))
e <- sqrt(phi) * noise
y <- 1 + 3 * x1 - 2 * x2 + e
dat <- data.frame(y, id, visit, x1, x2)
dat
}
# Does it work on normal data
dat <- gendat()
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "ar1")
fit
nas <- sample(1:200, 20)
dat$x1[nas] <- NA
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "ar1")
fit
# Add NAs in another covariate
# Should run fine, number of observations should be between 160 and 180
nas <- sample(1:200, 20)
dat$x2[nas] <- NA
fit <- geem(y ~ x1 + x2 , id = id, data = dat, corstr = "ar1")
fit
# Add a factor covariate with NAs
# Should run fine, number of observations should be between 140 and 180
xf <- as.factor(sample(1:3, size=200, replace=T))
dat$xf <- xf
nas <- sample(1:200, 20)
dat$xf[nas] <- NA
fit <- geem(y ~ x1 + x2+xf, id = id, data = dat, corstr = "ar1")
fit
# Put ID in environment, don't pass in data frame
# Shouldn't be a problem
id <- dat$id
df <- dat[,c(1,3,4,5,6)]
fit <- geem(y ~ x1 + x2+xf, id = id, data = df, corstr = "ar1")
fit
rm(id)
# Get everything from the parent environment
y <- dat$y
x1 <- dat$x1
x2 <- dat$x2
xf <- dat$xf
id <- dat$id
fit <- geem(y ~ x1 + x2+xf, id = id,  corstr = "ar1")
fit
rm(list=c("y", "x1", "x2", "xf", "id"))
# Add in some weights
# Should have no more than 45 clusters
wgt <- c(rep(0, 20), rep(1, 180))
dat$wgt <- wgt
fit <- geem(y ~ x1 + x2+xf, id = id, data=dat, corstr = "ar1", weights=wgt)
fit
# Use the weights without a data frame
# Should have no more than 45 clusters
wgt <- c(rep(0, 20), rep(1, 180))
dat <- dat[,-6]
fit <- geem(y ~ x1 + x2+xf, id = id, data=dat, corstr = "ar1", weights=wgt)
fit
head(dat)
# Does it work on normal data
dat <- gendat()
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "ar1")
fit
# Add some NAs in one covariate
# Should run fine, number of observations should be 180
nas <- sample(1:200, 20)
dat$x1[nas] <- NA
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "ar1")
fit
# Add NAs in another covariate
# Should run fine, number of observations should be between 160 and 180
nas <- sample(1:200, 20)
dat$x2[nas] <- NA
fit <- geem(y ~ x1 + x2 , id = id, data = dat, corstr = "ar1")
fit
# Add a factor covariate with NAs
# Should run fine, number of observations should be between 140 and 180
xf <- as.factor(sample(1:3, size=200, replace=T))
dat$xf <- xf
nas <- sample(1:200, 20)
dat$xf[nas] <- NA
fit <- geem(y ~ x1 + x2+xf, id = id, data = dat, corstr = "ar1")
fit
# Put ID in environment, don't pass in data frame
# Shouldn't be a problem
id <- dat$id
df <- dat[,c(1,3,4,5,6)]
fit <- geem(y ~ x1 + x2+xf, id = id, data = df, corstr = "ar1")
fit
rm(id)
# Get everything from the parent environment
y <- dat$y
x1 <- dat$x1
x2 <- dat$x2
xf <- dat$xf
id <- dat$id
fit <- geem(y ~ x1 + x2+xf, id = id,  corstr = "ar1")
fit
rm(list=c("y", "x1", "x2", "xf", "id"))
# Add in some weights
# Should have no more than 45 clusters
wgt <- c(rep(0, 20), rep(1, 180))
dat$wgt <- wgt
fit <- geem(y ~ x1 + x2+xf, id = id, data=dat, corstr = "ar1", weights=wgt)
fit
wgt <- c(rep(0, 20), rep(1, 180))
df <- data.frame(y = dat$y, id = dat$id, x1 = dat$x1, x2 = dat$x2, xf = dat$xf)
fit <- geem(y ~ x1 + x2+xf, id = id, data=df, corstr = "ar1", weights=wgt)
fit
dat <- gendat()
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "ind")
fit
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "ar1")
fit
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "exch")
fit
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "m-dep", Mv=2)
fit
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "unstruc")
fit
fixedmat <- matrix(c(1,0.5, 0.4, 0.3, 0.5, 1, 0.5, 0.4, 0.4, 0.5, 1, 0.5, 0.3, 0.4, 0.5, 1), nrow=4, byrow=T)
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "fixed", corr.mat=fixedmat)
fit
usermat <- matrix(c(1,2, 0, 3, 2, 1, 0, 0, 0, 0, 1,2, 3, 0, 2, 1), nrow=4, byrow=T)
usermat
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "user", corr.mat=usermat)
fit
fit <- geem(y ~ x1 + x2, id = id, data = dat, corstr = "user", corr.mat=usermat, weights=wgt)
fit
?geeM
geem
0.1*0.9/100 + 4*0.2*(0.8)/100
0.5*0.5/100 + ((0.6/0.5)^2)*0.6*0.4/100
0.8*0.2/100 + ((0.9/0.8)^2)*0.9*0.1/100
V <- p2*(1-p2) + ((p2/p1)^2)*p1*(1-p1)
p1 <- 0.1
p2 <- 0.2
0.1*0.9/100 + 4*0.2*(0.8)/100
V <- p2*(1-p2) + ((p2/p1)^2)*p1*(1-p1)
V
p1 <- (5:95)/100
p1 <- (5:85)/100
p2 <- p1+0.1
max(p2)
p2 <- p1+0.1
V <- p2*(1-p2) + ((p2/p1)^2)*p1*(1-p1)
plot(V)
alloc <- 0.75
V <- p2*(1-p2)/alloc + ((p2/p1)^2)*p1*(1-p1)/(1-alloc)
0.8*0.2/100 + ((0.9/0.8)^2)*0.9*0.1/100
plot(V)
alloc <- 0.25
V <- p2*(1-p2)/alloc + ((p2/p1)^2)*p1*(1-p1)/(1-alloc)
0.8*0.2/100 + ((0.9/0.8)^2)*0.9*0.1/100
plot(V)
plot(V~p1)
p <- (1000:9000)/10000
delta <- 0.75
lam <- 1
d <- 1
p <- (1000:9000)/10000
zbeta <- -pnorm(0.1)
zbeta <- -pnorm(0.05)
zbeta <- -dnorm(0.1)
zbeta <- -qnorm(0.1)
zalpha <- -qnorm(0.025)
delta <- 0.75
lam <- 1
EX <- 1/lam
d <- 1
p <- (1000:9000)/10000
zbeta <- -qnorm(0.1)
zalpha <- -qnorm(0.025)
addsamp <- (d*zbeta^2 + (zalpha^2)*(d+delta*EX*(1-2*p)) + 2*zalpha*zbeta*sqrt(d)*sqrt(d+delta*EX*(1-2*p)))/(p*(1-p)*delta^2*EX^2)
propsamp <- ((sqrt(Delta)*zalpha+(p + Delta*(1-p))*zbeta)^2)/(p*(1-p)*(Delta-1)^2)
Delta <- (lam+delta)/lam
p <- (1000:9000)/10000
zbeta <- -qnorm(0.1)
zalpha <- -qnorm(0.025)
addsamp <- (d*zbeta^2 + (zalpha^2)*(d+delta*EX*(1-2*p)) + 2*zalpha*zbeta*sqrt(d)*sqrt(d+delta*EX*(1-2*p)))/(p*(1-p)*delta^2*EX^2)
propsamp <- ((sqrt(Delta)*zalpha+(p + Delta*(1-p))*zbeta)^2)/(p*(1-p)*(Delta-1)^2)
expsamp <- (((zalpha+zbeta)^2)*lam^2)/(p(1-p)*delta)
expsamp <- (((zalpha+zbeta)^2)*lam^2)/(p*(1-p)*delta)
summary(expsamp)
summary(addsamp)
summary(propsamp)
expsamp <- (((zalpha+zbeta)^2)*lam^2)/(p*(1-p)*d*delta)
summary(expsamp)
summary(addsamp)
summary(propsamp)
library(ggplot2)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp, data=dfexp))
pl
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp)
pl
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)
pl
length(p)
addsamp[4000]
expsamp[4000]
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
plot(propsamp)
Delta
delta <- 0.5
lam <- 1
EX <- 1/lam
d <- 1
Delta <- (lam+delta)/lam
p <- (1000:9000)/10000
zbeta <- -qnorm(0.1)
zalpha <- -qnorm(0.025)
addsamp <- (d*zbeta^2 + (zalpha^2)*(d+delta*EX*(1-2*p)) + 2*zalpha*zbeta*sqrt(d)*sqrt(d+delta*EX*(1-2*p)))/(p*(1-p)*delta^2*EX^2)
propsamp <- ((sqrt(Delta)*zalpha+(p + Delta*(1-p))*zbeta)^2)/(p*(1-p)*(Delta-1)^2)
expsamp <- (((zalpha+zbeta)^2)*lam^2)/(p*(1-p)*d*delta)
summary(expsamp)
summary(addsamp)
summary(propsamp)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
log(Delta)
addsamp <- (d*zbeta^2 + (zalpha^2)*(d+delta*EX*(1-2*p)) + 2*zalpha*zbeta*sqrt(d)*sqrt(d+delta*EX*(1-2*p)))/(p*(1-p)*delta^2*EX^2)
propsamp <- ((sqrt(Delta)*zalpha+(1-p + Delta*p)*zbeta)^2)/(p*(1-p)*(Delta-1)^2)
expsamp <- (((zalpha+zbeta)^2)*lam^2)/(p*(1-p)*d*delta)
summary(expsamp)
summary(addsamp)
summary(propsamp)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
expsamp <- (((zalpha+zbeta)^2)*lam^2)/(p*(1-p)*d*delta^2)
summary(expsamp)
summary(addsamp)
summary(propsamp)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
Delta
propsamp <- (((zalpha+zbeta)^2))/(p*(1-p)*d*log(Delta)^2)
expsamp <- (((zalpha+zbeta)^2)*lam^2)/(p*(1-p)*d*delta^2)
summary(expsamp)
summary(addsamp)
summary(propsamp)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
propsamp <- (((zalpha+zbeta)^2))/(p*(1-p)*d*(Delta-1)^2)
expsamp <- (((zalpha+zbeta)^2)*lam^2)/(p*(1-p)*d*delta^2)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
addsamp <- (d*zbeta^2 + (zalpha^2)*(d+delta*EX*(1-2*p)) + 2*zalpha*zbeta*sqrt(d)*sqrt(d+delta*EX*(1-2*p)))/(p*(1-p)*delta^2*EX^2)
propsamp <- ((sqrt(Delta)*zalpha+(1-p + Delta*p)*zbeta)^2)/(p*(1-p)*(Delta-1)^2)
#propsamp <- (((zalpha+zbeta)^2))/(p*(1-p)*d*(Delta-1)^2)
expsamp <- (((zalpha+zbeta)^2)*lam^2)/(p*(1-p)*d*delta^2)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
expsamp <- ((((zalpha+zbeta)^2)*lam^2)/(d*delta^2))*((1-p)/p + 1)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
expsamp <- (((zalpha+zbeta)^2)/(d*delta^2))*(lam^2*(1-p)/p + lam^21)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
expsamp <- expn2 + expn2*((1-p)/p)
expn2 <- (((zalpha+zbeta)^2)/(d*delta^2))*(lam^2*(1-p)/p + lam^21)
expsamp <- expn2 + expn2*((1-p)/p)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
plot)expsamp
plot(expsamp)
expn2 <- (((zalpha+zbeta)^2)/(d*delta^2))*(lam^2*p/(1-p) + lam^21)
expsamp <- expn2 + expn2*((1-p)/p)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
delta <- 0.75
lam <- 1
EX <- 1/lam
d <- 1
Delta <- (lam+delta)/lam
p <- (1000:9000)/10000
zbeta <- -qnorm(0.1)
zalpha <- -qnorm(0.025)
addsamp <- (d*zbeta^2 + (zalpha^2)*(d+delta*EX*(1-2*p)) + 2*zalpha*zbeta*sqrt(d)*sqrt(d+delta*EX*(1-2*p)))/(p*(1-p)*delta^2*EX^2)
propsamp <- ((sqrt(Delta)*zalpha+(1-p + Delta*p)*zbeta)^2)/(p*(1-p)*(Delta-1)^2)
#propsamp <- (((zalpha+zbeta)^2))/(p*(1-p)*d*(Delta-1)^2)
expn2 <- (((zalpha+zbeta)^2)/(d*delta^2))*(lam^2*p/(1-p) + lam^21)
expsamp <- expn2 + expn2*((1-p)/p)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
delta <- 0.25
lam <- 1
EX <- 1/lam
d <- 1
Delta <- (lam+delta)/lam
p <- (1000:9000)/10000
zbeta <- -qnorm(0.1)
zalpha <- -qnorm(0.025)
addsamp <- (d*zbeta^2 + (zalpha^2)*(d+delta*EX*(1-2*p)) + 2*zalpha*zbeta*sqrt(d)*sqrt(d+delta*EX*(1-2*p)))/(p*(1-p)*delta^2*EX^2)
propsamp <- ((sqrt(Delta)*zalpha+(1-p + Delta*p)*zbeta)^2)/(p*(1-p)*(Delta-1)^2)
#propsamp <- (((zalpha+zbeta)^2))/(p*(1-p)*d*(Delta-1)^2)
expn2 <- (((zalpha+zbeta)^2)/(d*delta^2))*(lam^2*p/(1-p) + lam^21)
expsamp <- expn2 + expn2*((1-p)/p)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
delta <- 0.5
lam <- 1
EX <- 1/lam
d <- 1
Delta <- (lam+delta)/lam
p <- (1000:9000)/10000
zbeta <- -qnorm(0.1)
zalpha <- -qnorm(0.025)
addsamp <- (d*zbeta^2 + (zalpha^2)*(d+delta*EX*(1-2*p)) + 2*zalpha*zbeta*sqrt(d)*sqrt(d+delta*EX*(1-2*p)))/(p*(1-p)*delta^2*EX^2)
propsamp <- ((sqrt(Delta)*zalpha+(1-p + Delta*p)*zbeta)^2)/(p*(1-p)*(Delta-1)^2)
#propsamp <- (((zalpha+zbeta)^2))/(p*(1-p)*d*(Delta-1)^2)
expn2 <- (((zalpha+zbeta)^2)/(d*delta^2))*(lam^2*p/(1-p) + lam^21)
expsamp <- expn2 + expn2*((1-p)/p)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
delta <- 0.1
lam <- 1
EX <- 1/lam
d <- 1
Delta <- (lam+delta)/lam
p <- (1000:9000)/10000
zbeta <- -qnorm(0.1)
zalpha <- -qnorm(0.025)
addsamp <- (d*zbeta^2 + (zalpha^2)*(d+delta*EX*(1-2*p)) + 2*zalpha*zbeta*sqrt(d)*sqrt(d+delta*EX*(1-2*p)))/(p*(1-p)*delta^2*EX^2)
propsamp <- ((sqrt(Delta)*zalpha+(1-p + Delta*p)*zbeta)^2)/(p*(1-p)*(Delta-1)^2)
#propsamp <- (((zalpha+zbeta)^2))/(p*(1-p)*d*(Delta-1)^2)
expn2 <- (((zalpha+zbeta)^2)/(d*delta^2))*(lam^2*p/(1-p) + lam^21)
expsamp <- expn2 + expn2*((1-p)/p)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
delta <- 0.02
lam <- 1
EX <- 1/lam
d <- 1
Delta <- (lam+delta)/lam
p <- (1000:9000)/10000
zbeta <- -qnorm(0.1)
zalpha <- -qnorm(0.025)
addsamp <- (d*zbeta^2 + (zalpha^2)*(d+delta*EX*(1-2*p)) + 2*zalpha*zbeta*sqrt(d)*sqrt(d+delta*EX*(1-2*p)))/(p*(1-p)*delta^2*EX^2)
propsamp <- ((sqrt(Delta)*zalpha+(1-p + Delta*p)*zbeta)^2)/(p*(1-p)*(Delta-1)^2)
#propsamp <- (((zalpha+zbeta)^2))/(p*(1-p)*d*(Delta-1)^2)
expn2 <- (((zalpha+zbeta)^2)/(d*delta^2))*(lam^2*p/(1-p) + lam^21)
expsamp <- expn2 + expn2*((1-p)/p)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
delta <- 0.5
lam <- 1
EX <- 1/lam
d <- 1
Delta <- (lam+delta)/lam
p <- (1000:9000)/10000
zbeta <- -qnorm(0.1)
zalpha <- -qnorm(0.025)
addsamp <- (d*zbeta^2 + (zalpha^2)*(d+delta*EX*(1-2*p)) + 2*zalpha*zbeta*sqrt(d)*sqrt(d+delta*EX*(1-2*p)))/(p*(1-p)*delta^2*EX^2)
propsamp <- ((sqrt(Delta)*zalpha+(1-p + Delta*p)*zbeta)^2)/(p*(1-p)*(Delta-1)^2)
#propsamp <- (((zalpha+zbeta)^2))/(p*(1-p)*d*(Delta-1)^2)
expn2 <- (((zalpha+zbeta)^2)/(d*delta^2))*(lam^2*p/(1-p) + lam^21)
expsamp <- expn2 + expn2*((1-p)/p)
dfexp <- data.frame(p = p, n = expsamp)
dfadd <- data.frame(p = p, n = addsamp)
dfprop <- data.frame(p = p, n = propsamp)
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=expsamp), data=dfexp) + geom_line(aes(x=p, y=addsamp), data=dfadd)+ geom_line(aes(x=p, y=propsamp), data=dfadd)
pl
rep(1:3, 3)
sampdf <- data.frame(p=rep(p, 3), n = c(addsamp, expsamp, propsamp), type=c(rep("Additive", length(p)), rep("Exponential", length(p)), rep("Logrank", length(p))))
pl <- ggplot() + geom_line(aes(x=p, y=n, color=type), data=sampdf)
pl
pl <- ggplot() + geom_line(aes(x=p, y=n, color=Calculation), data=sampdf)
pl
sampdf <- data.frame(p=rep(p, 3), n = c(addsamp, expsamp, propsamp), Calculation=c(rep("Additive", length(p)), rep("Exponential", length(p)), rep("Logrank", length(p))))
library(ggplot2)
pl <- ggplot() + geom_line(aes(x=p, y=n, color=Calculation), data=sampdf)
pl
pl <- ggplot() + geom_line(aes(x=p, y=n, color=Calculation), data=sampdf) + theme_bw() + opts(legend.position="bottom")
pl
pl <- ggplot() + geom_line(aes(x=p, y=n, color=Calculation), data=sampdf) + theme_bw() + opts(legend.position="bottom")
pl <- pl + xlab("Probability of Allocation to Experimental")
pl
pl <- pl + xlab("Probability of Allocation to Experimental") + ylab("Sample Size")
pl
?jpeg
setwd("Jobs/LSU/Talk")
setwd("Figs")
pl
jpeg("imbalance.jpg")
pl
dev.off()
pdf("imbalance.pdf")
pl
dev.off()
